// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  purchases     Purchase[]
  rentals       Rental[]
  createdAt     DateTime  @default(now())
}

model Book {
  id          String     @id @default(cuid())
  title       String
  author      String
  description String?    @db.Text
  imageUrl    String
  price       Float
  rentalPrice Float
  category    String
  isbn        String?    @unique
  stock       Int        @default(0)
  available   Boolean    @default(true)
  createdAt   DateTime   @default(now())
  purchases   Purchase[]
  rentals     Rental[]
}

model Purchase {
  id        String   @id @default(cuid())
  userId    String
  bookId    String
  price     Float
  createdAt DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id])
  book Book @relation(fields: [bookId], references: [id])
}

model Rental {
  id         String    @id @default(cuid())
  userId     String
  bookId     String
  price      Float
  startDate  DateTime  @default(now())
  endDate    DateTime
  returned   Boolean   @default(false)
  createdAt  DateTime  @default(now())
  
  user User @relation(fields: [userId], references: [id])
  book Book @relation(fields: [bookId], references: [id])
}